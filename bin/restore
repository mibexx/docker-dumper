#!/usr/bin/env bash

. /usr/local/bin/inc/basics


if [[ "$useENGINE" == "default" ]]; then
    DUMPNAME=$(ls /dump/ | grep "\-$useVERSION" | sort | tail -n 1)
fi

if [[ "$useENGINE" == "ssh" ]]; then
    [[ -z "${SSHUSER}" ]] && useSSHUSER='root' || useSSHUSER="${SSHUSER}"
    [[ -z "${SSHPORT}" ]] && useSSHPORT='22' || useSSHPORT="${SSHPORT}"
    [[ -z "${SSHHOST}" ]] && useSSHHOST='127.0.0.1' || useSSHHOST="${SSHHOST}"

    if [[ -z "${SSHDEST}" ]]; then
        useSSHDEST="~/"
    else
        useSSHDEST=${SSHDEST}
    fi


    COMMAND="$useSSHUSER@$useSSHHOST"
    filterDEST="*-$useVERSION*tgz"

    if [[ -z "${SSHPASS}" ]]; then
        [[ -z "${SSHKEYFILE}" ]] && useSSHKEYFILE='/root/.ssh/id_rsa' || useSSHKEYFILE="${SSHKEYFILE}"

        if [[ -z "${DUMPNAME}" ]]; then
            # Get latest dump
            DUMPNAME=$(ssh -p $useSSHPORT -i $useSSHKEYFILE -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $COMMAND find $useSSHDEST$PROJECT/ -type f -name $filterDEST -exec 'basename {} \;' | sort | tail -n 1)
        else
            DUMPNAME="${DUMPNAME}"
        fi

        echo "Dump found: $DUMPNAME"
        COMMANDDEST="$COMMAND:$useSSHDEST$PROJECT/$DUMPNAME"
        scp -P $useSSHPORT -i $useSSHKEYFILE -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $COMMANDDEST /dump/$DUMPNAME
    else
        if [[ -z "${DUMPNAME}" ]]; then
            # Get latest dump
            DUMPNAME=$(sshpass -p '${SSHPASS}' ssh -p $useSSHPORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $COMMAND find $useSSHDEST$PROJECT/ -type f -name $filterDEST -exec 'basename {} \;' | sort | tail -n 1)
        else
            DUMPNAME="${DUMPNAME}"
        fi

        echo "Dump found: $DUMPNAME"
        COMMANDDEST="$COMMAND:$useSSHDEST$PROJECT/$DUMPNAME"
        sshpass -p '${SSHPASS}' scp -P $useSSHPORT -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $COMMANDDEST /dump/$DUMPNAME
    fi
fi

if [[ "$useENGINE" == "awss3" ]]; then
    if [[ -z "${BUCKET}" ]]; then
       echo "Environment variable BUCKET not configured"
       exit -1
    fi

    if [[ -z "${DUMPNAME}" ]]; then
        # Get latest dump
        DUMPNAME=$(aws s3 ls ${BUCKET}/$PROJECT/ | grep 'tgz' | grep "\-$useVERSION" | sort | tail -n 1 | awk '{ print $4 }')
        DUMPNAME=$(echo $DUMPNAME )
    else
        DUMPNAME="${DUMPNAME}"
    fi

    echo "Found dump: $DUMPNAME"
    aws s3 cp "${BUCKET}/$PROJECT/$DUMPNAME" /dump/$DUMPNAME
fi

# Extract tgz
echo "Extract dump: $DUMPNAME"
tar xfz "/dump/$DUMPNAME" -C /